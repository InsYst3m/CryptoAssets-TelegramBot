// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public static partial class CryptoAssetsGraphServiceClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor> AddCryptoAssetsGraphServiceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetGlobalMarketDataQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetSupportedCryptoAssetsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor>("CryptoAssetsGraphServiceClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CryptoAssetsGraphServiceClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetCryptoAssetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetCryptoAssetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetGlobalMarketDataResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetGlobalMarketDataBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.GetGlobalMarketDataQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetGlobalMarketDataQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetSupportedCryptoAssetsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetSupportedCryptoAssetsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.GetSupportedCryptoAssetsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetSupportedCryptoAssetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace NotificationBot.Telegram.Infrastructure.GraphService
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResult : global::System.IEquatable<GetCryptoAssetResult>, IGetCryptoAssetResult
    {
        public GetCryptoAssetResult(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? cryptoAsset)
        {
            CryptoAsset = cryptoAsset;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? CryptoAsset { get; }

        public virtual global::System.Boolean Equals(GetCryptoAssetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CryptoAsset is null && other.CryptoAsset is null) || CryptoAsset != null && CryptoAsset.Equals(other.CryptoAsset)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAssetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CryptoAsset != null)
                {
                    hash ^= 397 * CryptoAsset.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAsset_CryptoAsset_CryptoAssetViewModel : global::System.IEquatable<GetCryptoAsset_CryptoAsset_CryptoAssetViewModel>, IGetCryptoAsset_CryptoAsset_CryptoAssetViewModel
    {
        public GetCryptoAsset_CryptoAsset_CryptoAssetViewModel(global::System.String name, global::System.String abbreviation, global::System.Int64 rank, global::System.Decimal capitalizationUsd, global::System.Decimal currentPriceUsd, global::System.Decimal allTimeHighPriceUsd, global::System.Decimal allTimeLowPriceUsd, global::System.Decimal highTwentyFourHoursUsd, global::System.Decimal lowTwentyFourHoursUsd, global::System.String priceChangePercentageTwentyFourHours, global::System.String priceChangePercentageSevenDays, global::System.String priceChangePercentageThirtyDays, global::System.String priceChangePercentageSixtyDays, global::System.String priceChangePercentageOneYear, global::System.String allTimeHighChangePercentage, global::System.DateTimeOffset allTimeHighDate, global::System.String allTimeLowChangePercentage, global::System.DateTimeOffset allTimeLowDate)
        {
            Name = name;
            Abbreviation = abbreviation;
            Rank = rank;
            CapitalizationUsd = capitalizationUsd;
            CurrentPriceUsd = currentPriceUsd;
            AllTimeHighPriceUsd = allTimeHighPriceUsd;
            AllTimeLowPriceUsd = allTimeLowPriceUsd;
            HighTwentyFourHoursUsd = highTwentyFourHoursUsd;
            LowTwentyFourHoursUsd = lowTwentyFourHoursUsd;
            PriceChangePercentageTwentyFourHours = priceChangePercentageTwentyFourHours;
            PriceChangePercentageSevenDays = priceChangePercentageSevenDays;
            PriceChangePercentageThirtyDays = priceChangePercentageThirtyDays;
            PriceChangePercentageSixtyDays = priceChangePercentageSixtyDays;
            PriceChangePercentageOneYear = priceChangePercentageOneYear;
            AllTimeHighChangePercentage = allTimeHighChangePercentage;
            AllTimeHighDate = allTimeHighDate;
            AllTimeLowChangePercentage = allTimeLowChangePercentage;
            AllTimeLowDate = allTimeLowDate;
        }

        public global::System.String Name { get; }

        public global::System.String Abbreviation { get; }

        public global::System.Int64 Rank { get; }

        public global::System.Decimal CapitalizationUsd { get; }

        public global::System.Decimal CurrentPriceUsd { get; }

        public global::System.Decimal AllTimeHighPriceUsd { get; }

        public global::System.Decimal AllTimeLowPriceUsd { get; }

        public global::System.Decimal HighTwentyFourHoursUsd { get; }

        public global::System.Decimal LowTwentyFourHoursUsd { get; }

        public global::System.String PriceChangePercentageTwentyFourHours { get; }

        public global::System.String PriceChangePercentageSevenDays { get; }

        public global::System.String PriceChangePercentageThirtyDays { get; }

        public global::System.String PriceChangePercentageSixtyDays { get; }

        public global::System.String PriceChangePercentageOneYear { get; }

        public global::System.String AllTimeHighChangePercentage { get; }

        public global::System.DateTimeOffset AllTimeHighDate { get; }

        public global::System.String AllTimeLowChangePercentage { get; }

        public global::System.DateTimeOffset AllTimeLowDate { get; }

        public virtual global::System.Boolean Equals(GetCryptoAsset_CryptoAsset_CryptoAssetViewModel? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && Abbreviation.Equals(other.Abbreviation) && Rank == other.Rank && CapitalizationUsd == other.CapitalizationUsd && CurrentPriceUsd == other.CurrentPriceUsd && AllTimeHighPriceUsd == other.AllTimeHighPriceUsd && AllTimeLowPriceUsd == other.AllTimeLowPriceUsd && HighTwentyFourHoursUsd == other.HighTwentyFourHoursUsd && LowTwentyFourHoursUsd == other.LowTwentyFourHoursUsd && PriceChangePercentageTwentyFourHours.Equals(other.PriceChangePercentageTwentyFourHours) && PriceChangePercentageSevenDays.Equals(other.PriceChangePercentageSevenDays) && PriceChangePercentageThirtyDays.Equals(other.PriceChangePercentageThirtyDays) && PriceChangePercentageSixtyDays.Equals(other.PriceChangePercentageSixtyDays) && PriceChangePercentageOneYear.Equals(other.PriceChangePercentageOneYear) && AllTimeHighChangePercentage.Equals(other.AllTimeHighChangePercentage) && AllTimeHighDate.Equals(other.AllTimeHighDate) && AllTimeLowChangePercentage.Equals(other.AllTimeLowChangePercentage) && AllTimeLowDate.Equals(other.AllTimeLowDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAsset_CryptoAsset_CryptoAssetViewModel)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Abbreviation.GetHashCode();
                hash ^= 397 * Rank.GetHashCode();
                hash ^= 397 * CapitalizationUsd.GetHashCode();
                hash ^= 397 * CurrentPriceUsd.GetHashCode();
                hash ^= 397 * AllTimeHighPriceUsd.GetHashCode();
                hash ^= 397 * AllTimeLowPriceUsd.GetHashCode();
                hash ^= 397 * HighTwentyFourHoursUsd.GetHashCode();
                hash ^= 397 * LowTwentyFourHoursUsd.GetHashCode();
                hash ^= 397 * PriceChangePercentageTwentyFourHours.GetHashCode();
                hash ^= 397 * PriceChangePercentageSevenDays.GetHashCode();
                hash ^= 397 * PriceChangePercentageThirtyDays.GetHashCode();
                hash ^= 397 * PriceChangePercentageSixtyDays.GetHashCode();
                hash ^= 397 * PriceChangePercentageOneYear.GetHashCode();
                hash ^= 397 * AllTimeHighChangePercentage.GetHashCode();
                hash ^= 397 * AllTimeHighDate.GetHashCode();
                hash ^= 397 * AllTimeLowChangePercentage.GetHashCode();
                hash ^= 397 * AllTimeLowDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAssetResult
    {
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? CryptoAsset { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset
    {
        public global::System.String Name { get; }

        public global::System.String Abbreviation { get; }

        public global::System.Int64 Rank { get; }

        public global::System.Decimal CapitalizationUsd { get; }

        public global::System.Decimal CurrentPriceUsd { get; }

        public global::System.Decimal AllTimeHighPriceUsd { get; }

        public global::System.Decimal AllTimeLowPriceUsd { get; }

        public global::System.Decimal HighTwentyFourHoursUsd { get; }

        public global::System.Decimal LowTwentyFourHoursUsd { get; }

        public global::System.String PriceChangePercentageTwentyFourHours { get; }

        public global::System.String PriceChangePercentageSevenDays { get; }

        public global::System.String PriceChangePercentageThirtyDays { get; }

        public global::System.String PriceChangePercentageSixtyDays { get; }

        public global::System.String PriceChangePercentageOneYear { get; }

        public global::System.String AllTimeHighChangePercentage { get; }

        public global::System.DateTimeOffset AllTimeHighDate { get; }

        public global::System.String AllTimeLowChangePercentage { get; }

        public global::System.DateTimeOffset AllTimeLowDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_CryptoAssetViewModel : IGetCryptoAsset_CryptoAsset
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataResult : global::System.IEquatable<GetGlobalMarketDataResult>, IGetGlobalMarketDataResult
    {
        public GetGlobalMarketDataResult(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketData_GlobalCryptoMarketData? globalCryptoMarketData)
        {
            GlobalCryptoMarketData = globalCryptoMarketData;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketData_GlobalCryptoMarketData? GlobalCryptoMarketData { get; }

        public virtual global::System.Boolean Equals(GetGlobalMarketDataResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlobalCryptoMarketData is null && other.GlobalCryptoMarketData is null) || GlobalCryptoMarketData != null && GlobalCryptoMarketData.Equals(other.GlobalCryptoMarketData)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGlobalMarketDataResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlobalCryptoMarketData != null)
                {
                    hash ^= 397 * GlobalCryptoMarketData.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel : global::System.IEquatable<GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel>, IGetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel
    {
        public GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel(global::System.Int64 activeCryptoCurrencies, global::System.Decimal capitalizationUsd)
        {
            ActiveCryptoCurrencies = activeCryptoCurrencies;
            CapitalizationUsd = capitalizationUsd;
        }

        public global::System.Int64 ActiveCryptoCurrencies { get; }

        public global::System.Decimal CapitalizationUsd { get; }

        public virtual global::System.Boolean Equals(GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ActiveCryptoCurrencies == other.ActiveCryptoCurrencies) && CapitalizationUsd == other.CapitalizationUsd;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ActiveCryptoCurrencies.GetHashCode();
                hash ^= 397 * CapitalizationUsd.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetGlobalMarketDataResult
    {
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketData_GlobalCryptoMarketData? GlobalCryptoMarketData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetGlobalMarketData_GlobalCryptoMarketData
    {
        public global::System.Int64 ActiveCryptoCurrencies { get; }

        public global::System.Decimal CapitalizationUsd { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel : IGetGlobalMarketData_GlobalCryptoMarketData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsResult : global::System.IEquatable<GetSupportedCryptoAssetsResult>, IGetSupportedCryptoAssetsResult
    {
        public GetSupportedCryptoAssetsResult(global::System.Collections.Generic.IReadOnlyList<global::System.String> supportedCryptoAssets)
        {
            SupportedCryptoAssets = supportedCryptoAssets;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> SupportedCryptoAssets { get; }

        public virtual global::System.Boolean Equals(GetSupportedCryptoAssetsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(SupportedCryptoAssets, other.SupportedCryptoAssets));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetSupportedCryptoAssetsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var SupportedCryptoAssets_elm in SupportedCryptoAssets)
                {
                    hash ^= 397 * SupportedCryptoAssets_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetSupportedCryptoAssetsResult
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String> SupportedCryptoAssets { get; }
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     name
    ///     abbreviation
    ///     rank
    ///     capitalizationUsd
    ///     currentPriceUsd
    ///     allTimeHighPriceUsd
    ///     allTimeLowPriceUsd
    ///     highTwentyFourHoursUsd
    ///     lowTwentyFourHoursUsd
    ///     priceChangePercentageTwentyFourHours
    ///     priceChangePercentageSevenDays
    ///     priceChangePercentageThirtyDays
    ///     priceChangePercentageSixtyDays
    ///     priceChangePercentageOneYear
    ///     allTimeHighChangePercentage
    ///     allTimeHighDate
    ///     allTimeLowChangePercentage
    ///     allTimeLowDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCryptoAssetQueryDocument()
        {
        }

        public static GetCryptoAssetQueryDocument Instance { get; } = new GetCryptoAssetQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x28, 0x24, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x28, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x64, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x55, 0x73, 0x64, 0x20, 0x68, 0x69, 0x67, 0x68, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x55, 0x73, 0x64, 0x20, 0x6c, 0x6f, 0x77, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x55, 0x73, 0x64, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x77, 0x65, 0x6e, 0x74, 0x79, 0x46, 0x6f, 0x75, 0x72, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x65, 0x76, 0x65, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x54, 0x68, 0x69, 0x72, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x53, 0x69, 0x78, 0x74, 0x79, 0x44, 0x61, 0x79, 0x73, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x4f, 0x6e, 0x65, 0x59, 0x65, 0x61, 0x72, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x69, 0x67, 0x68, 0x44, 0x61, 0x74, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x77, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "93ff63c745dd3b2a987e83eec23c46fd");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     name
    ///     abbreviation
    ///     rank
    ///     capitalizationUsd
    ///     currentPriceUsd
    ///     allTimeHighPriceUsd
    ///     allTimeLowPriceUsd
    ///     highTwentyFourHoursUsd
    ///     lowTwentyFourHoursUsd
    ///     priceChangePercentageTwentyFourHours
    ///     priceChangePercentageSevenDays
    ///     priceChangePercentageThirtyDays
    ///     priceChangePercentageSixtyDays
    ///     priceChangePercentageOneYear
    ///     allTimeHighChangePercentage
    ///     allTimeHighDate
    ///     allTimeLowChangePercentage
    ///     allTimeLowDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetQuery : global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCryptoAssetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetCryptoAssetQuery(global::StrawberryShake.IOperationExecutor<IGetCryptoAssetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCryptoAssetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> ExecuteAsync(global::System.String abbreviation, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(abbreviation);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> Watch(global::System.String abbreviation, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(abbreviation);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String abbreviation)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("abbreviation", FormatAbbreviation(abbreviation));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCryptoAssetQueryDocument.Instance.Hash.Value, name: "GetCryptoAsset", document: GetCryptoAssetQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAbbreviation(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     name
    ///     abbreviation
    ///     rank
    ///     capitalizationUsd
    ///     currentPriceUsd
    ///     allTimeHighPriceUsd
    ///     allTimeLowPriceUsd
    ///     highTwentyFourHoursUsd
    ///     lowTwentyFourHoursUsd
    ///     priceChangePercentageTwentyFourHours
    ///     priceChangePercentageSevenDays
    ///     priceChangePercentageThirtyDays
    ///     priceChangePercentageSixtyDays
    ///     priceChangePercentageOneYear
    ///     allTimeHighChangePercentage
    ///     allTimeHighDate
    ///     allTimeLowChangePercentage
    ///     allTimeLowDate
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAssetQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> ExecuteAsync(global::System.String abbreviation, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> Watch(global::System.String abbreviation, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetGlobalMarketData GraphQL operation
    /// <code>
    /// query GetGlobalMarketData {
    ///   globalCryptoMarketData {
    ///     __typename
    ///     activeCryptoCurrencies
    ///     capitalizationUsd
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataQueryDocument : global::StrawberryShake.IDocument
    {
        private GetGlobalMarketDataQueryDocument()
        {
        }

        public static GetGlobalMarketDataQueryDocument Instance { get; } = new GetGlobalMarketDataQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x20, 0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x73, 0x64, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "6f8dcfaf1bececc9dac6ee5f06e09ab2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGlobalMarketData GraphQL operation
    /// <code>
    /// query GetGlobalMarketData {
    ///   globalCryptoMarketData {
    ///     __typename
    ///     activeCryptoCurrencies
    ///     capitalizationUsd
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataQuery : global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetGlobalMarketDataResult> _operationExecutor;
        public GetGlobalMarketDataQuery(global::StrawberryShake.IOperationExecutor<IGetGlobalMarketDataResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetGlobalMarketDataResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGlobalMarketDataResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGlobalMarketDataResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetGlobalMarketDataQueryDocument.Instance.Hash.Value, name: "GetGlobalMarketData", document: GetGlobalMarketDataQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetGlobalMarketData GraphQL operation
    /// <code>
    /// query GetGlobalMarketData {
    ///   globalCryptoMarketData {
    ///     __typename
    ///     activeCryptoCurrencies
    ///     capitalizationUsd
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetGlobalMarketDataQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetGlobalMarketDataResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetGlobalMarketDataResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetSupportedCryptoAssets GraphQL operation
    /// <code>
    /// query GetSupportedCryptoAssets {
    ///   supportedCryptoAssets
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetSupportedCryptoAssetsQueryDocument()
        {
        }

        public static GetSupportedCryptoAssetsQueryDocument Instance { get; } = new GetSupportedCryptoAssetsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b9fa7fde843c2626ce75f97c0b63fb71");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSupportedCryptoAssets GraphQL operation
    /// <code>
    /// query GetSupportedCryptoAssets {
    ///   supportedCryptoAssets
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsQuery : global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetSupportedCryptoAssetsResult> _operationExecutor;
        public GetSupportedCryptoAssetsQuery(global::StrawberryShake.IOperationExecutor<IGetSupportedCryptoAssetsResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetSupportedCryptoAssetsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSupportedCryptoAssetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest();
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSupportedCryptoAssetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetSupportedCryptoAssetsQueryDocument.Instance.Hash.Value, name: "GetSupportedCryptoAssets", document: GetSupportedCryptoAssetsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the GetSupportedCryptoAssets GraphQL operation
    /// <code>
    /// query GetSupportedCryptoAssets {
    ///   supportedCryptoAssets
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetSupportedCryptoAssetsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetSupportedCryptoAssetsResult>> ExecuteAsync(global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetSupportedCryptoAssetsResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CryptoAssetsGraphServiceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClient : global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient
    {
        private readonly global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery _getCryptoAsset;
        private readonly global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery _getGlobalMarketData;
        private readonly global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery _getSupportedCryptoAssets;
        public CryptoAssetsGraphServiceClient(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery getCryptoAsset, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery getGlobalMarketData, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery getSupportedCryptoAssets)
        {
            _getCryptoAsset = getCryptoAsset ?? throw new global::System.ArgumentNullException(nameof(getCryptoAsset));
            _getGlobalMarketData = getGlobalMarketData ?? throw new global::System.ArgumentNullException(nameof(getGlobalMarketData));
            _getSupportedCryptoAssets = getSupportedCryptoAssets ?? throw new global::System.ArgumentNullException(nameof(getSupportedCryptoAssets));
        }

        public static global::System.String ClientName => "CryptoAssetsGraphServiceClient";
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery GetCryptoAsset => _getCryptoAsset;
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery GetGlobalMarketData => _getGlobalMarketData;
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery GetSupportedCryptoAssets => _getSupportedCryptoAssets;
    }

    /// <summary>
    /// Represents the CryptoAssetsGraphServiceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface ICryptoAssetsGraphServiceClient
    {
        global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery GetCryptoAsset { get; }

        global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataQuery GetGlobalMarketData { get; }

        global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsQuery GetSupportedCryptoAssets { get; }
    }
}

namespace NotificationBot.Telegram.Infrastructure.GraphService.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCryptoAssetResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult);
        public GetCryptoAssetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCryptoAssetResultInfo info)
            {
                return new GetCryptoAssetResult(MapIGetCryptoAsset_CryptoAsset(info.CryptoAsset, snapshot));
            }

            throw new global::System.ArgumentException("GetCryptoAssetResultInfo expected.");
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? MapIGetCryptoAsset_CryptoAsset(global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetViewModelData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCryptoAsset_CryptoAsset returnValue = default !;
            if (data?.__typename.Equals("CryptoAssetViewModel", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCryptoAsset_CryptoAsset_CryptoAssetViewModel(data.Name ?? throw new global::System.ArgumentNullException(), data.Abbreviation ?? throw new global::System.ArgumentNullException(), data.Rank ?? throw new global::System.ArgumentNullException(), data.CapitalizationUsd ?? throw new global::System.ArgumentNullException(), data.CurrentPriceUsd ?? throw new global::System.ArgumentNullException(), data.AllTimeHighPriceUsd ?? throw new global::System.ArgumentNullException(), data.AllTimeLowPriceUsd ?? throw new global::System.ArgumentNullException(), data.HighTwentyFourHoursUsd ?? throw new global::System.ArgumentNullException(), data.LowTwentyFourHoursUsd ?? throw new global::System.ArgumentNullException(), data.PriceChangePercentageTwentyFourHours ?? throw new global::System.ArgumentNullException(), data.PriceChangePercentageSevenDays ?? throw new global::System.ArgumentNullException(), data.PriceChangePercentageThirtyDays ?? throw new global::System.ArgumentNullException(), data.PriceChangePercentageSixtyDays ?? throw new global::System.ArgumentNullException(), data.PriceChangePercentageOneYear ?? throw new global::System.ArgumentNullException(), data.AllTimeHighChangePercentage ?? throw new global::System.ArgumentNullException(), data.AllTimeHighDate ?? throw new global::System.ArgumentNullException(), data.AllTimeLowChangePercentage ?? throw new global::System.ArgumentNullException(), data.AllTimeLowDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCryptoAssetResultInfo(global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetViewModelData? cryptoAsset, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CryptoAsset = cryptoAsset;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetViewModelData? CryptoAsset { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCryptoAssetResultInfo(CryptoAsset, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.GetGlobalMarketDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetGlobalMarketDataResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult);
        public GetGlobalMarketDataResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetGlobalMarketDataResultInfo info)
            {
                return new GetGlobalMarketDataResult(MapIGetGlobalMarketData_GlobalCryptoMarketData(info.GlobalCryptoMarketData, snapshot));
            }

            throw new global::System.ArgumentException("GetGlobalMarketDataResultInfo expected.");
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketData_GlobalCryptoMarketData? MapIGetGlobalMarketData_GlobalCryptoMarketData(global::NotificationBot.Telegram.Infrastructure.GraphService.State.GlobalMarketViewModelData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetGlobalMarketData_GlobalCryptoMarketData returnValue = default !;
            if (data?.__typename.Equals("GlobalMarketViewModel", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetGlobalMarketData_GlobalCryptoMarketData_GlobalMarketViewModel(data.ActiveCryptoCurrencies ?? throw new global::System.ArgumentNullException(), data.CapitalizationUsd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetGlobalMarketDataResultInfo(global::NotificationBot.Telegram.Infrastructure.GraphService.State.GlobalMarketViewModelData? globalCryptoMarketData, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlobalCryptoMarketData = globalCryptoMarketData;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.State.GlobalMarketViewModelData? GlobalCryptoMarketData { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetGlobalMarketDataResultInfo(GlobalCryptoMarketData, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.GetSupportedCryptoAssetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetSupportedCryptoAssetsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult);
        public GetSupportedCryptoAssetsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetSupportedCryptoAssetsResultInfo info)
            {
                return new GetSupportedCryptoAssetsResult(info.SupportedCryptoAssets);
            }

            throw new global::System.ArgumentException("GetSupportedCryptoAssetsResultInfo expected.");
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetSupportedCryptoAssetsResultInfo(global::System.Collections.Generic.IReadOnlyList<global::System.String> supportedCryptoAssets, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            SupportedCryptoAssets = supportedCryptoAssets;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> SupportedCryptoAssets { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetSupportedCryptoAssetsResultInfo(SupportedCryptoAssets, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetCryptoAssetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCryptoAssetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCryptoAssetResult Result, GetCryptoAssetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCryptoAssetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCryptoAssetResult, GetCryptoAssetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCryptoAssetResultInfo(DeserializeIGetCryptoAsset_CryptoAsset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cryptoAsset")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetViewModelData? DeserializeIGetCryptoAsset_CryptoAsset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CryptoAssetViewModel", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetViewModelData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), abbreviation: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "abbreviation")), rank: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "rank")), capitalizationUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "capitalizationUsd")), currentPriceUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentPriceUsd")), allTimeHighPriceUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeHighPriceUsd")), allTimeLowPriceUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeLowPriceUsd")), highTwentyFourHoursUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "highTwentyFourHoursUsd")), lowTwentyFourHoursUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lowTwentyFourHoursUsd")), priceChangePercentageTwentyFourHours: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "priceChangePercentageTwentyFourHours")), priceChangePercentageSevenDays: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "priceChangePercentageSevenDays")), priceChangePercentageThirtyDays: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "priceChangePercentageThirtyDays")), priceChangePercentageSixtyDays: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "priceChangePercentageSixtyDays")), priceChangePercentageOneYear: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "priceChangePercentageOneYear")), allTimeHighChangePercentage: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeHighChangePercentage")), allTimeHighDate: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeHighDate")), allTimeLowChangePercentage: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeLowChangePercentage")), allTimeLowDate: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allTimeLowDate")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetGlobalMarketDataBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetGlobalMarketDataBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetGlobalMarketDataResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetGlobalMarketDataResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetGlobalMarketDataResult Result, GetGlobalMarketDataResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetGlobalMarketDataResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetGlobalMarketDataResult, GetGlobalMarketDataResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetGlobalMarketDataResultInfo(DeserializeIGetGlobalMarketData_GlobalCryptoMarketData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "globalCryptoMarketData")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.State.GlobalMarketViewModelData? DeserializeIGetGlobalMarketData_GlobalCryptoMarketData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlobalMarketViewModel", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::NotificationBot.Telegram.Infrastructure.GraphService.State.GlobalMarketViewModelData(typename, activeCryptoCurrencies: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activeCryptoCurrencies")), capitalizationUsd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "capitalizationUsd")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetSupportedCryptoAssetsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetSupportedCryptoAssetsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetSupportedCryptoAssetsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetSupportedCryptoAssetsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetSupportedCryptoAssetsResult Result, GetSupportedCryptoAssetsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetSupportedCryptoAssetsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetSupportedCryptoAssetsResult, GetSupportedCryptoAssetsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetSupportedCryptoAssetsResultInfo(DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supportedCryptoAssets")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> DeserializeNonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetViewModelData
    {
        public CryptoAssetViewModelData(global::System.String __typename, global::System.String? name = default !, global::System.String? abbreviation = default !, global::System.Int64? rank = default !, global::System.Decimal? capitalizationUsd = default !, global::System.Decimal? currentPriceUsd = default !, global::System.Decimal? allTimeHighPriceUsd = default !, global::System.Decimal? allTimeLowPriceUsd = default !, global::System.Decimal? highTwentyFourHoursUsd = default !, global::System.Decimal? lowTwentyFourHoursUsd = default !, global::System.String? priceChangePercentageTwentyFourHours = default !, global::System.String? priceChangePercentageSevenDays = default !, global::System.String? priceChangePercentageThirtyDays = default !, global::System.String? priceChangePercentageSixtyDays = default !, global::System.String? priceChangePercentageOneYear = default !, global::System.String? allTimeHighChangePercentage = default !, global::System.DateTimeOffset? allTimeHighDate = default !, global::System.String? allTimeLowChangePercentage = default !, global::System.DateTimeOffset? allTimeLowDate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Abbreviation = abbreviation;
            Rank = rank;
            CapitalizationUsd = capitalizationUsd;
            CurrentPriceUsd = currentPriceUsd;
            AllTimeHighPriceUsd = allTimeHighPriceUsd;
            AllTimeLowPriceUsd = allTimeLowPriceUsd;
            HighTwentyFourHoursUsd = highTwentyFourHoursUsd;
            LowTwentyFourHoursUsd = lowTwentyFourHoursUsd;
            PriceChangePercentageTwentyFourHours = priceChangePercentageTwentyFourHours;
            PriceChangePercentageSevenDays = priceChangePercentageSevenDays;
            PriceChangePercentageThirtyDays = priceChangePercentageThirtyDays;
            PriceChangePercentageSixtyDays = priceChangePercentageSixtyDays;
            PriceChangePercentageOneYear = priceChangePercentageOneYear;
            AllTimeHighChangePercentage = allTimeHighChangePercentage;
            AllTimeHighDate = allTimeHighDate;
            AllTimeLowChangePercentage = allTimeLowChangePercentage;
            AllTimeLowDate = allTimeLowDate;
        }

        public global::System.String __typename { get; }

        public global::System.String? Name { get; }

        public global::System.String? Abbreviation { get; }

        public global::System.Int64? Rank { get; }

        public global::System.Decimal? CapitalizationUsd { get; }

        public global::System.Decimal? CurrentPriceUsd { get; }

        public global::System.Decimal? AllTimeHighPriceUsd { get; }

        public global::System.Decimal? AllTimeLowPriceUsd { get; }

        public global::System.Decimal? HighTwentyFourHoursUsd { get; }

        public global::System.Decimal? LowTwentyFourHoursUsd { get; }

        public global::System.String? PriceChangePercentageTwentyFourHours { get; }

        public global::System.String? PriceChangePercentageSevenDays { get; }

        public global::System.String? PriceChangePercentageThirtyDays { get; }

        public global::System.String? PriceChangePercentageSixtyDays { get; }

        public global::System.String? PriceChangePercentageOneYear { get; }

        public global::System.String? AllTimeHighChangePercentage { get; }

        public global::System.DateTimeOffset? AllTimeHighDate { get; }

        public global::System.String? AllTimeLowChangePercentage { get; }

        public global::System.DateTimeOffset? AllTimeLowDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GlobalMarketViewModelData
    {
        public GlobalMarketViewModelData(global::System.String __typename, global::System.Int64? activeCryptoCurrencies = default !, global::System.Decimal? capitalizationUsd = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ActiveCryptoCurrencies = activeCryptoCurrencies;
            CapitalizationUsd = capitalizationUsd;
        }

        public global::System.String __typename { get; }

        public global::System.Int64? ActiveCryptoCurrencies { get; }

        public global::System.Decimal? CapitalizationUsd { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CryptoAssetsGraphServiceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
