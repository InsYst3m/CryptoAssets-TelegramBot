// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public static partial class CryptoAssetsGraphServiceClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor> AddCryptoAssetsGraphServiceClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientStoreAccessor>("CryptoAssetsGraphServiceClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CryptoAssetsGraphServiceClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetCryptoAssetResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>, global::NotificationBot.Telegram.Infrastructure.GraphService.State.GetCryptoAssetBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetsGraphServiceClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::NotificationBot.Telegram.Infrastructure.GraphService.CryptoAssetsGraphServiceClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace NotificationBot.Telegram.Infrastructure.GraphService
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResult : global::System.IEquatable<GetCryptoAssetResult>, IGetCryptoAssetResult
    {
        public GetCryptoAssetResult(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? cryptoAsset)
        {
            CryptoAsset = cryptoAsset;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? CryptoAsset { get; }

        public virtual global::System.Boolean Equals(GetCryptoAssetResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CryptoAsset is null && other.CryptoAsset is null) || CryptoAsset != null && CryptoAsset.Equals(other.CryptoAsset)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAssetResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CryptoAsset != null)
                {
                    hash ^= 397 * CryptoAsset.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAsset_CryptoAsset_CryptoAsset : global::System.IEquatable<GetCryptoAsset_CryptoAsset_CryptoAsset>, IGetCryptoAsset_CryptoAsset_CryptoAsset
    {
        public GetCryptoAsset_CryptoAsset_CryptoAsset(global::System.String abbreviation, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData? marketData)
        {
            Abbreviation = abbreviation;
            MarketData = marketData;
        }

        public global::System.String Abbreviation { get; }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData? MarketData { get; }

        public virtual global::System.Boolean Equals(GetCryptoAsset_CryptoAsset_CryptoAsset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Abbreviation.Equals(other.Abbreviation)) && ((MarketData is null && other.MarketData is null) || MarketData != null && MarketData.Equals(other.MarketData));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAsset_CryptoAsset_CryptoAsset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Abbreviation.GetHashCode();
                if (MarketData != null)
                {
                    hash ^= 397 * MarketData.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAsset_CryptoAsset_MarketData_MarketData : global::System.IEquatable<GetCryptoAsset_CryptoAsset_MarketData_MarketData>, IGetCryptoAsset_CryptoAsset_MarketData_MarketData
    {
        public GetCryptoAsset_CryptoAsset_MarketData_MarketData(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice? currentPrice)
        {
            CurrentPrice = currentPrice;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice? CurrentPrice { get; }

        public virtual global::System.Boolean Equals(GetCryptoAsset_CryptoAsset_MarketData_MarketData? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((CurrentPrice is null && other.CurrentPrice is null) || CurrentPrice != null && CurrentPrice.Equals(other.CurrentPrice)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAsset_CryptoAsset_MarketData_MarketData)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (CurrentPrice != null)
                {
                    hash ^= 397 * CurrentPrice.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice : global::System.IEquatable<GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice>, IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice
    {
        public GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice(global::System.Decimal usd)
        {
            Usd = usd;
        }

        public global::System.Decimal Usd { get; }

        public virtual global::System.Boolean Equals(GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Usd == other.Usd);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Usd.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAssetResult
    {
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? CryptoAsset { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset
    {
        public global::System.String Abbreviation { get; }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData? MarketData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_CryptoAsset : IGetCryptoAsset_CryptoAsset
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_MarketData
    {
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice? CurrentPrice { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_MarketData_MarketData : IGetCryptoAsset_CryptoAsset_MarketData
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice
    {
        public global::System.Decimal Usd { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice : IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice
    {
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     abbreviation
    ///     marketData {
    ///       __typename
    ///       currentPrice {
    ///         __typename
    ///         usd
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetQueryDocument : global::StrawberryShake.IDocument
    {
        private GetCryptoAssetQueryDocument()
        {
        }

        public static GetCryptoAssetQueryDocument Instance { get; } = new GetCryptoAssetQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x28, 0x24, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x41, 0x73, 0x73, 0x65, 0x74, 0x28, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x73, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "841e9a6bae38619e32fd98a816cf1fb2");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     abbreviation
    ///     marketData {
    ///       __typename
    ///       currentPrice {
    ///         __typename
    ///         usd
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetQuery : global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetCryptoAssetResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetCryptoAssetQuery(global::StrawberryShake.IOperationExecutor<IGetCryptoAssetResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetCryptoAssetResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> ExecuteAsync(global::System.String abbreviation, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(abbreviation);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> Watch(global::System.String abbreviation, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(abbreviation);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String abbreviation)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("abbreviation", FormatAbbreviation(abbreviation));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetCryptoAssetQueryDocument.Instance.Hash.Value, name: "GetCryptoAsset", document: GetCryptoAssetQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAbbreviation(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetCryptoAsset GraphQL operation
    /// <code>
    /// query GetCryptoAsset($abbreviation: String!) {
    ///   cryptoAsset(abbreviation: $abbreviation) {
    ///     __typename
    ///     abbreviation
    ///     marketData {
    ///       __typename
    ///       currentPrice {
    ///         __typename
    ///         usd
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface IGetCryptoAssetQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> ExecuteAsync(global::System.String abbreviation, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetCryptoAssetResult>> Watch(global::System.String abbreviation, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CryptoAssetsGraphServiceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClient : global::NotificationBot.Telegram.Infrastructure.GraphService.ICryptoAssetsGraphServiceClient
    {
        private readonly global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery _getCryptoAsset;
        public CryptoAssetsGraphServiceClient(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery getCryptoAsset)
        {
            _getCryptoAsset = getCryptoAsset ?? throw new global::System.ArgumentNullException(nameof(getCryptoAsset));
        }

        public static global::System.String ClientName => "CryptoAssetsGraphServiceClient";
        public global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery GetCryptoAsset => _getCryptoAsset;
    }

    /// <summary>
    /// Represents the CryptoAssetsGraphServiceClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial interface ICryptoAssetsGraphServiceClient
    {
        global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetQuery GetCryptoAsset { get; }
    }
}

namespace NotificationBot.Telegram.Infrastructure.GraphService.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.GetCryptoAssetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetCryptoAssetResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult);
        public GetCryptoAssetResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetCryptoAssetResultInfo info)
            {
                return new GetCryptoAssetResult(MapIGetCryptoAsset_CryptoAsset(info.CryptoAsset, snapshot));
            }

            throw new global::System.ArgumentException("GetCryptoAssetResultInfo expected.");
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset? MapIGetCryptoAsset_CryptoAsset(global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCryptoAsset_CryptoAsset returnValue = default !;
            if (data?.__typename.Equals("CryptoAsset", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCryptoAsset_CryptoAsset_CryptoAsset(data.Abbreviation ?? throw new global::System.ArgumentNullException(), MapIGetCryptoAsset_CryptoAsset_MarketData(data.MarketData, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData? MapIGetCryptoAsset_CryptoAsset_MarketData(global::NotificationBot.Telegram.Infrastructure.GraphService.State.MarketDataData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCryptoAsset_CryptoAsset_MarketData returnValue = default !;
            if (data?.__typename.Equals("MarketData", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCryptoAsset_CryptoAsset_MarketData_MarketData(MapIGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice(data.CurrentPrice, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice? MapIGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice(global::NotificationBot.Telegram.Infrastructure.GraphService.State.CurrentPriceData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice returnValue = default !;
            if (data?.__typename.Equals("CurrentPrice", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetCryptoAsset_CryptoAsset_MarketData_CurrentPrice_CurrentPrice(data.Usd ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetCryptoAssetResultInfo(global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetData? cryptoAsset, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            CryptoAsset = cryptoAsset;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetData? CryptoAsset { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetCryptoAssetResultInfo(CryptoAsset, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class GetCryptoAssetBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _decimalParser;
        public GetCryptoAssetBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::NotificationBot.Telegram.Infrastructure.GraphService.IGetCryptoAssetResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _decimalParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("Decimal") ?? throw new global::System.ArgumentException("No serializer for type `Decimal` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetCryptoAssetResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetCryptoAssetResult Result, GetCryptoAssetResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetCryptoAssetResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetCryptoAssetResult, GetCryptoAssetResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetCryptoAssetResultInfo(DeserializeIGetCryptoAsset_CryptoAsset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cryptoAsset")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetData? DeserializeIGetCryptoAsset_CryptoAsset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CryptoAsset", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::NotificationBot.Telegram.Infrastructure.GraphService.State.CryptoAssetData(typename, abbreviation: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "abbreviation")), marketData: DeserializeIGetCryptoAsset_CryptoAsset_MarketData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "marketData")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.State.MarketDataData? DeserializeIGetCryptoAsset_CryptoAsset_MarketData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("MarketData", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::NotificationBot.Telegram.Infrastructure.GraphService.State.MarketDataData(typename, currentPrice: DeserializeIGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "currentPrice")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::NotificationBot.Telegram.Infrastructure.GraphService.State.CurrentPriceData? DeserializeIGetCryptoAsset_CryptoAsset_MarketData_CurrentPrice(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("CurrentPrice", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::NotificationBot.Telegram.Infrastructure.GraphService.State.CurrentPriceData(typename, usd: DeserializeNonNullableDecimal(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "usd")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Decimal DeserializeNonNullableDecimal(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _decimalParser.Parse(obj.Value.GetDecimal()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetData
    {
        public CryptoAssetData(global::System.String __typename, global::System.String? abbreviation = default !, global::NotificationBot.Telegram.Infrastructure.GraphService.State.MarketDataData? marketData = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Abbreviation = abbreviation;
            MarketData = marketData;
        }

        public global::System.String __typename { get; }

        public global::System.String? Abbreviation { get; }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.State.MarketDataData? MarketData { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class MarketDataData
    {
        public MarketDataData(global::System.String __typename, global::NotificationBot.Telegram.Infrastructure.GraphService.State.CurrentPriceData? currentPrice = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            CurrentPrice = currentPrice;
        }

        public global::System.String __typename { get; }

        public global::NotificationBot.Telegram.Infrastructure.GraphService.State.CurrentPriceData? CurrentPrice { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CurrentPriceData
    {
        public CurrentPriceData(global::System.String __typename, global::System.Decimal? usd = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Usd = usd;
        }

        public global::System.String __typename { get; }

        public global::System.Decimal? Usd { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                _ => throw new global::System.NotSupportedException()};
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.8.2.0")]
    public partial class CryptoAssetsGraphServiceClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CryptoAssetsGraphServiceClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
